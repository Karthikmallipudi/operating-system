#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 10

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
};

void roundRobinScheduling(struct Process processes[], int n, int time_quantum) {
    int remaining_processes = n;
    int current_time = 0;
    int quantum;
    
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                quantum = (processes[i].remaining_time < time_quantum) ? processes[i].remaining_time : time_quantum;
                
                current_time += quantum;
                processes[i].remaining_time -= quantum;
                
                printf("Process %d ran for %d units of time. Remaining time: %d\n", processes[i].id, quantum, processes[i].remaining_time);
                
                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                    printf("Process %d completed.\n", processes[i].id);
                }
            }
        }
    }
}

int main() {
    int n;
    struct Process processes[MAX_PROCESS];
    int time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n > MAX_PROCESS) {
        printf("Number of processes exceeds the maximum limit.\n");
        return 1;
    }

    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    for (int i = 0; i < n; i++) {
        processes[i].id = i;
        printf("Enter arrival time and burst time for process %d: ", i);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    roundRobinScheduling(processes, n, time_quantum);

    return 0;
}
