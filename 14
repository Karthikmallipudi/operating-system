#include <stdio.h>

int main() {
    int processes, resources, i, j;

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    int max[processes][resources];
    int allocation[processes][resources];
    int need[processes][resources];
    int available[resources];
    int work[resources];
    int finish[processes];

    // Input maximum resource requirement for each process
    printf("Enter the maximum resource requirement for each process:\n");
    for (i = 0; i < processes; i++) {
        printf("For process P%d: ", i);
        for (j = 0; j < resources; j++) {
            scanf("%d", &max[i][j]);
        }
        finish[i] = 0;
    }

    // Input resource allocation for each process
    printf("Enter the resource allocation for each process:\n");
    for (i = 0; i < processes; i++) {
        printf("For process P%d: ", i);
        for (j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Input available resources
    printf("Enter the available resources:\n");
    for (i = 0; i < resources; i++) {
        scanf("%d", &available[i]);
        work[i] = available[i];
    }

    // Banker's algorithm to check for safe state
    int safe = 0;
    int sequence[processes];
    int count = 0;

    while (count < processes) {
        safe = 0;
        for (i = 0; i < processes; i++) {
            if (!finish[i]) {
                int resourceCheck = 1;
                for (j = 0; j < resources; j++) {
                    if (need[i][j] > work[j]) {
                        resourceCheck = 0;
                        break;
                    }
                }
                if (resourceCheck) {
                    for (j = 0; j < resources; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    sequence[count] = i;
                    count++;
                    safe = 1;
                }
            }
        }
        if (!safe) {
            break;
        }
    }

    if (count == processes) {
        printf("System is in a safe state.\n");
        printf("Safe sequence: ");
        for (i = 0; i < processes; i++) {
            printf("P%d", sequence[i]);
            if (i < processes - 1) {
                printf(" -> ");
            }
        }
        printf("\n");
    } else {
        printf("System is in an unsafe state. Deadlock may occur.\n");
    }

    return 0;
}
